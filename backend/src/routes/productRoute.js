// backend/src/routes/productRoute.js - ‚úÖ FIXED VERSION
import express from "express";
import multer from "multer";
import { protect, isPrinter } from "../middleware/authMiddleware.js";
import { storage as cloudinaryStorage } from "../config/cloudinary.js";
import {
  createProduct,
  getMyProducts,
  getAllProducts,
  getProductById,
  updateProduct,
  deleteProduct,
} from "../controllers/productController.js";

const router = express.Router();

// ‚úÖ FIXED: Khai b√°o 'upload' middleware v·ªõi error handling c·∫£i thi·ªán
const upload = multer({
  storage: cloudinaryStorage,
  limits: {
    fileSize: 5 * 1024 * 1024, // 5MB
    files: 5, // Maximum 5 files
  },
  fileFilter: (req, file, cb) => {
    console.log(
      `üîç FileFilter checking: ${file.originalname}, type: ${file.mimetype}`
    );

    const allowedTypes = ["image/jpeg", "image/png", "image/webp"];
    if (allowedTypes.includes(file.mimetype)) {
      cb(null, true);
    } else {
      console.error(`‚ùå FileFilter rejected: ${file.mimetype}`);
      // ‚úÖ T·∫°o error object r√µ r√†ng thay v√¨ MulterError
      const error = new Error("Ch·ªâ ch·∫•p nh·∫≠n file ·∫£nh (JPEG, PNG, WEBP).");
      error.code = "INVALID_FILE_TYPE";
      cb(error, false);
    }
  },
});

// ‚úÖ IMPROVED: Middleware x·ª≠ l√Ω l·ªói to√†n di·ªán h∆°n
function handleUploadError(err, req, res, next) {
  console.error("üî¥ Upload Error Handler triggered:", err);

  // X·ª≠ l√Ω l·ªói t·ª´ Multer
  if (err instanceof multer.MulterError) {
    console.error("‚ùå Multer Error:", err.code, "-", err.message);
    let message = "L·ªói t·∫£i l√™n file.";

    switch (err.code) {
      case "LIMIT_FILE_SIZE":
        message = "File qu√° l·ªõn (t·ªëi ƒëa 5MB m·ªói file).";
        break;
      case "LIMIT_FILE_COUNT":
        message = "Ch·ªâ ƒë∆∞·ª£c t·∫£i l√™n t·ªëi ƒëa 5 ·∫£nh.";
        break;
      case "LIMIT_UNEXPECTED_FILE":
        message = err.message || "Tr∆∞·ªùng file kh√¥ng ƒë∆∞·ª£c ch·∫•p nh·∫≠n.";
        break;
      default:
        message = err.message || "L·ªói t·∫£i file.";
    }

    return res.status(400).json({
      success: false,
      message: message,
      errorCode: err.code,
    });
  }

  // ‚úÖ CRITICAL FIX: X·ª≠ l√Ω l·ªói t·ª´ Cloudinary Storage
  if (err && err.message) {
    console.error("‚ùå Cloudinary/Storage Error:", err.message);

    // L·ªói t·ª´ Cloudinary th∆∞·ªùng c√≥ message c·ª• th·ªÉ
    if (
      err.message.includes("cloud_name") ||
      err.message.includes("api_key") ||
      err.message.includes("api_secret")
    ) {
      return res.status(500).json({
        success: false,
        message: "L·ªói c·∫•u h√¨nh h·ªá th·ªëng. Vui l√≤ng li√™n h·ªá admin.",
        hint: "Cloudinary configuration error",
      });
    }

    // L·ªói file type t·ª´ fileFilter
    if (err.code === "INVALID_FILE_TYPE") {
      return res.status(400).json({
        success: false,
        message: err.message,
      });
    }

    // L·ªói kh√°c t·ª´ storage
    return res.status(500).json({
      success: false,
      message: "L·ªói khi l∆∞u tr·ªØ file. Vui l√≤ng th·ª≠ l·∫°i.",
      error: process.env.NODE_ENV === "development" ? err.message : undefined,
    });
  }

  // ‚úÖ L·ªói kh√¥ng x√°c ƒë·ªãnh
  console.error("‚ùå Unknown Upload Error:", err);
  return res.status(500).json({
    success: false,
    message: "L·ªói kh√¥ng x√°c ƒë·ªãnh khi t·∫£i file.",
    error: process.env.NODE_ENV === "development" ? String(err) : undefined,
  });
}

// ============================================
// ROUTES
// ============================================

// --- PUBLIC ---
router.get("/", getAllProducts);

// --- PRIVATE ---
router.get("/my-products", protect, isPrinter, getMyProducts);

// ‚úÖ FIXED: POST /api/products (T·∫°o s·∫£n ph·∫©m) v·ªõi error handling c·∫£i thi·ªán
router.post(
  "/",
  protect, // 1. X√°c th·ª±c user TR∆Ø·ªöC (ƒë·ªÉ req.user t·ªìn t·∫°i cho cloudinary)
  isPrinter, // 2. Ki·ªÉm tra role
  (req, res, next) => {
    console.log("üöÄ POST /api/products - Starting upload middleware...");
    console.log(
      "üë§ User authenticated:",
      req.user?._id,
      "Role:",
      req.user?.role
    );

    // 3. Ch·∫°y multer upload
    upload.array("images", 5)(req, res, (err) => {
      if (err) {
        // ‚úÖ CRITICAL FIX: B·∫Øt T·∫§T C·∫¢ l·ªói t·ª´ multer v√† cloudinary storage
        console.error("‚ùå Upload middleware error:", err);
        return handleUploadError(err, req, res, next);
      }

      // ‚úÖ Upload th√†nh c√¥ng
      console.log("‚úÖ Upload middleware completed successfully");
      console.log(`üì¶ Files uploaded: ${req.files?.length || 0}`);
      console.log(`üìù Body fields received:`, Object.keys(req.body));

      next(); // Chuy·ªÉn sang controller
    });
  },
  createProduct // 4. Controller x·ª≠ l√Ω logic t·∫°o product
);

// PUT /api/products/:id (C·∫≠p nh·∫≠t)
router.put("/:id", protect, isPrinter, updateProduct);

// DELETE /api/products/:id (X√≥a)
router.delete("/:id", protect, isPrinter, deleteProduct);

// --- DYNAMIC PUBLIC (Cu·ªëi c√πng) ---
router.get("/:id", getProductById);

export default router;
