// backend/src/routes/authOAuthRoute.js
import express from "express";
import passport from "passport";
import crypto from "crypto";
import Session from "../models/session.js";
import { generateAccessToken } from "../controllers/authController.js";
import dotenv from "dotenv";

dotenv.config();

const router = express.Router();

const CLIENT_URL = process.env.CLIENT_URL || "http://localhost:5173";
const REFRESH_TOKEN_TTL = 14 * 24 * 60 * 60 * 1000;

// ‚úÖ H√ÄM T·∫†O SESSION V√Ä G·ª¨I TOKEN
const createSessionAndSendTokens = async (req, res, user) => {
  try {
    if (!user || !user._id) {
      console.error("‚ùå Kh√¥ng c√≥ user h·ª£p l·ªá trong callback.");
      return res.redirect(`${CLIENT_URL}/signin?error=auth_failed`);
    }

    console.log("‚úÖ User t·ª´ Google:", user.email);

    // 1. T·∫°o tokens
    const accessToken = generateAccessToken(user._id);
    const refreshToken = crypto.randomBytes(64).toString("hex");

    // 2. L∆∞u session v√†o DB
    await Session.create({
      userId: user._id,
      refreshToken,
      expireAt: new Date(Date.now() + REFRESH_TOKEN_TTL),
    });

    console.log("‚úÖ ƒê√£ t·∫°o session cho user:", user._id);

    // 3. Set cookie v·ªõi c·∫•u h√¨nh ch·∫∑t ch·∫Ω
    res.cookie("refreshToken", refreshToken, {
      httpOnly: true,
      secure: process.env.NODE_ENV === "production",
      sameSite: process.env.NODE_ENV === "production" ? "none" : "lax",
      maxAge: REFRESH_TOKEN_TTL,
      path: "/", // ‚úÖ ƒê·∫£m b·∫£o cookie √°p d·ª•ng cho to√†n b·ªô domain
    });

    console.log("‚úÖ ƒê√£ set refreshToken cookie");

    // 4. G·ª≠i d·ªØ li·ªáu v·ªÅ popup qua postMessage
    const userData = {
      _id: user._id,
      email: user.email,
      displayName: user.displayName,
      role: user.role,
      avatarUrl: user.avatarUrl,
      isVerified: user.isVerified,
    };

    res.send(`
      <!DOCTYPE html>
      <html>
        <head>
          <title>ƒêƒÉng nh·∫≠p th√†nh c√¥ng</title>
        </head>
        <body>
          <script>
            console.log("üîÑ ƒêang g·ª≠i data v·ªÅ tab g·ªëc...");
            
            // G·ª≠i th√¥ng tin v·ªÅ tab g·ªëc
            if (window.opener) {
              window.opener.postMessage(
                {
                  type: "GOOGLE_AUTH_SUCCESS",
                  accessToken: "${accessToken}",
                  user: ${JSON.stringify(userData)}
                },
                "${CLIENT_URL}"
              );
              console.log("‚úÖ ƒê√£ g·ª≠i postMessage");
              
              // ƒê√≥ng popup sau 500ms
              setTimeout(() => {
                window.close();
              }, 500);
            } else {
              console.error("‚ùå Kh√¥ng t√¨m th·∫•y window.opener");
              alert("L·ªói: Kh√¥ng th·ªÉ k·∫øt n·ªëi v·ªõi c·ª≠a s·ªï ch√≠nh. Vui l√≤ng th·ª≠ l·∫°i.");
            }
          </script>
          <p style="text-align: center; padding: 20px;">
            ƒêƒÉng nh·∫≠p th√†nh c√¥ng! ƒêang chuy·ªÉn h∆∞·ªõng...
          </p>
        </body>
      </html>
    `);
  } catch (error) {
    console.error("‚ùå L·ªói khi t·∫°o session/g·ª≠i token:", error);
    res.redirect(`${CLIENT_URL}/signin?error=server_error`);
  }
};

// ‚úÖ Route kh·ªüi t·∫°o ƒëƒÉng nh·∫≠p Google
router.get(
  "/google",
  passport.authenticate("google", {
    scope: ["profile", "email"],
    session: false,
  })
);
// ‚úÖ (Middleware M·ªöI) Ghi nh·ªõ vai tr√≤ OAuth
const rememberOAuthRole = (req, res, next) => {
  const role = req.query.role === "printer" ? "printer" : "customer";
  req.session.oauthRole = role; // L∆∞u vai tr√≤ v√†o session
  console.log(`‚úÖ OAuth: Ghi nh·ªõ vai tr√≤: ${role}`);
  next();
};

// ‚úÖ Route kh·ªüi t·∫°o (C·∫¨P NH·∫¨T)
router.get(
  "/google",
  rememberOAuthRole, // <-- Ch·∫°y middleware M·ªöI tr∆∞·ªõc
  passport.authenticate("google", {
    scope: ["profile", "email"],
    session: false,
  })
);
// ‚úÖ Route callback sau khi x√°c th·ª±c Google
router.get(
  "/google/callback",
  passport.authenticate("google", {
    session: false,
    failureRedirect: `${CLIENT_URL}/signin?error=auth_failed`,
  }),
  async (req, res) => {
    console.log("‚úÖ Google Callback th√†nh c√¥ng, user:", req.user?.email);
    await createSessionAndSendTokens(req, res, req.user);
  }
);

export default router;
