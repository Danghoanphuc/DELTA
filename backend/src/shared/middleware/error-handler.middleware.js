// src/shared/middleware/error-handler.middleware.js
import multer from "multer";
import { BaseException } from "../exceptions/BaseException.js"; // C·∫ßn import BaseException
import { ApiResponse } from "../utils/api-response.util.js"; // C·∫ßn import ApiResponse
import { API_CODES } from "../constants/api-codes.constants.js"; // C·∫ßn import API_CODES
import { Logger } from "../utils/logger.util.js"; // C·∫ßn import Logger

/**
 * X·ª≠ l√Ω l·ªói t·ª´ Multer (B·∫°n ƒë√£ c√≥ h√†m n√†y)
 * (Gi·ªØ nguy√™n code g·ªëc c·ªßa b·∫°n)
 */
export function handleUploadError(err, req, res, next) {
  console.error("üî¥ Upload Error Handler triggered:", err);

  if (err instanceof multer.MulterError) {
    console.error("‚ùå Multer Error:", err.code, "-", err.message);
    let message = "L·ªói t·∫£i l√™n file.";
    switch (err.code) {
      case "LIMIT_FILE_SIZE":
        message = "File qu√° l·ªõn (t·ªëi ƒëa 5MB m·ªói file).";
        break;
      case "LIMIT_FILE_COUNT":
        message = "Ch·ªâ ƒë∆∞·ª£c t·∫£i l√™n t·ªëi ƒëa 5 ·∫£nh.";
        break;
      case "LIMIT_UNEXPECTED_FILE":
        message = err.message || "Tr∆∞·ªùng file kh√¥ng ƒë∆∞·ª£c ch·∫•p nh·∫≠n.";
        break;
      default:
        message = err.message || "L·ªói t·∫£i file.";
    }
    return res.status(400).json({
      success: false,
      message: message,
      errorCode: err.code,
    });
  }

  if (err && err.code === "INVALID_FILE_TYPE") {
    return res.status(400).json({
      success: false,
      message: err.message, // "Ch·ªâ ch·∫•p nh·∫≠n file ·∫£nh..."
    });
  }

  // Chuy·ªÉn ti·∫øp n·∫øu kh√¥ng ph·∫£i l·ªói Multer
  next(err);
}

/**
 * H√ÄM B·ªä THI·∫æU: Middleware x·ª≠ l√Ω l·ªói to√†n c·ª•c (Global Error Handler)
 * B·∫Øt t·∫•t c·∫£ l·ªói ƒë∆∞·ª£c n√©m ra t·ª´ c√°c exceptions (NotFound, Validation, v.v.)
 * Ph·∫£i ƒë∆∞·ª£c ƒë·∫∑t SAU T·∫§T C·∫¢ c√°c app.use() v√† routes kh√°c trong server.js.
 */
export const errorHandler = (err, req, res, next) => {
  // Logger.error(`[${req.method} ${req.path}]`, err.message); // T·∫°m comment Logger
  console.error("!!! ERROR HANDLER ACTIVATED:", err); // D√πng console.error

  // 1. X·ª≠ l√Ω c√°c l·ªói t√πy ch·ªânh (k·∫ø th·ª´a t·ª´ BaseException)
  if (err instanceof BaseException) {
    const errors = err.errors || null;
    return res
      .status(err.statusCode)
      .json(ApiResponse.error(err.message, errors));
  }

  // 2. X·ª≠ l√Ω l·ªói validation c·ªßa Mongoose
  if (err.name === "ValidationError") {
    const errors = Object.values(err.errors).map((e) => e.message);
    return res
      .status(API_CODES.BAD_REQUEST)
      .json(ApiResponse.error("D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá", errors));
  }

  // 3. X·ª≠ l√Ω l·ªói tr√πng l·∫∑p c·ªßa Mongoose (Duplicate Key)
  if (err.code === 11000) {
    const field = Object.keys(err.keyValue)[0];
    const message = `Gi√° tr·ªã '${err.keyValue[field]}' cho tr∆∞·ªùng '${field}' ƒë√£ t·ªìn t·∫°i.`;
    return res
      .status(API_CODES.CONFLICT)
      .json(ApiResponse.error(message, ["DUPLICATE_KEY"]));
  }

  // 4. X·ª≠ l√Ω l·ªói chung (500 Internal Server Error)
  const message =
    process.env.NODE_ENV === "production"
      ? "C√≥ l·ªói x·∫£y ra, vui l√≤ng th·ª≠ l·∫°i sau."
      : err.message || "L·ªói m√°y ch·ªß n·ªôi b·ªô kh√¥ng x√°c ƒë·ªãnh";

  res.status(API_CODES.INTERNAL_SERVER_ERROR).json(ApiResponse.error(message));
};
