// src/controllers/productController.js - ƒê√É KH·∫ÆC PH·ª§C 100%
import { Product } from "../models/Product.js";

// --- (H√ÄM M·ªöI 1 - C√îNG KHAI) ---
// @desc    L·∫•y t·∫•t c·∫£ s·∫£n ph·∫©m c√¥ng khai (cho kh√°ch)
// @route   GET /api/products
// @access  Public
export const getAllProducts = async (req, res) => {
  try {
    // (Sau n√†y c√≥ th·ªÉ th√™m filter, search, pagination t·∫°i ƒë√¢y)
    // V√≠ d·ª•: L·ªçc theo category
    const filter = { isActive: true };
    if (req.query.category) {
      filter.category = req.query.category;
    }
    if (req.query.search) {
      // S·ª≠ d·ª•ng $text search
      filter.$text = {
        $search: req.query.search,
        $caseSensitive: false,
        $diacriticSensitive: false,
      };
    }
    const products = await Product.find(filter)
      .populate({
        path: "printerId", // L·∫•y th√¥ng tin nh√† in
        select: "displayName avatarUrl", // Ch·ªâ l·∫•y 2 tr∆∞·ªùng n√†y
      })
      .sort({ createdAt: -1 });

    res.status(200).json({ products });
  } catch (error) {
    console.error("L·ªói khi l·∫•y t·∫•t c·∫£ s·∫£n ph·∫©m:", error);
    res.status(500).json({ message: "L·ªói h·ªá th·ªëng." });
  }
};

// --- (H√ÄM M·ªöI 2 - C√îNG KHAI) ---
// @desc    L·∫•y chi ti·∫øt 1 s·∫£n ph·∫©m (cho kh√°ch)
// @route   GET /api/products/:id
// @access  Public
export const getProductById = async (req, res) => {
  try {
    const product = await Product.findById(req.params.id).populate({
      path: "printerId",
      select: "displayName avatarUrl rating specialties", // L·∫•y th√™m th√¥ng tin nh√† in
    });

    if (!product || !product.isActive) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m." });
    }

    // (Sau n√†y c√≥ th·ªÉ th√™m logic tƒÉng "views" t·∫°i ƒë√¢y)

    res.status(200).json({ product });
  } catch (error) {
    console.error("L·ªói khi l·∫•y chi ti·∫øt s·∫£n ph·∫©m:", error);
    if (error.kind === "ObjectId") {
      return res.status(404).json({ message: "ID s·∫£n ph·∫©m kh√¥ng h·ª£p l·ªá." });
    }
    res.status(500).json({ message: "L·ªói h·ªá th·ªëng." });
  }
};

// --- (C√ÅC H√ÄM C≈® - C·ª¶A NH√Ä IN) - ƒê√É FIX ---

// @desc    T·∫°o s·∫£n ph·∫©m m·ªõi
// @route   POST /api/products
// @access  Private (Ch·ªâ Printer)
export const createProduct = async (req, res) => {
  try {
    console.log("=== CREATE PRODUCT REQUEST ===");
    console.log("User ID:", req.user?._id, "Role:", req.user?.role);
    console.log("Request Body:", JSON.stringify(req.body, null, 2));

    // 1. Ki·ªÉm tra vai tr√≤
    if (req.user.role !== "printer") {
      console.error("‚ùå Unauthorized: User is not a printer");
      return res
        .status(403)
        .json({ message: "C·∫•m truy c·∫≠p: Ch·ªâ nh√† in m·ªõi ƒë∆∞·ª£c th√™m s·∫£n ph·∫©m." });
    }

    // 2. L·∫•y d·ªØ li·ªáu t·ª´ body
    const {
      name,
      category,
      description,
      images,
      pricing,
      specifications,
      productionTime,
      customization,
    } = req.body;

    // 3. Validation chi ti·∫øt
    const errors = [];

    if (!name || name.trim().length === 0) {
      errors.push("T√™n s·∫£n ph·∫©m kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng");
    }

    if (!category) {
      errors.push("Danh m·ª•c s·∫£n ph·∫©m kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng");
    }

    // Validate pricing array - QUAN TR·ªåNG!
    if (!pricing || !Array.isArray(pricing) || pricing.length === 0) {
      errors.push("Ph·∫£i c√≥ √≠t nh·∫•t m·ªôt m·ª©c gi√°");
    } else {
      pricing.forEach((tier, index) => {
        if (!tier.minQuantity || tier.minQuantity < 1) {
          errors.push(
            `M·ª©c gi√° ${index + 1}: S·ªë l∆∞·ª£ng t·ªëi thi·ªÉu ph·∫£i l·ªõn h∆°n 0`
          );
        }
        if (
          tier.pricePerUnit === undefined ||
          tier.pricePerUnit === null ||
          tier.pricePerUnit < 0
        ) {
          errors.push(
            `M·ª©c gi√° ${index + 1}: Gi√° m·ªói ƒë∆°n v·ªã ph·∫£i l·ªõn h∆°n ho·∫∑c b·∫±ng 0`
          );
        }
      });
    }

    if (errors.length > 0) {
      console.error("‚ùå Validation errors:", errors);
      return res.status(400).json({
        message: "D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá",
        errors: errors,
      });
    }

    // 4. Chu·∫©n b·ªã data ƒë·ªÉ l∆∞u (v·ªõi default values)
    const productData = {
      printerId: req.user._id,
      name: name.trim(),
      category,
      description: description?.trim() || "",
      images: Array.isArray(images) ? images : [],
      pricing: pricing,
      specifications: specifications || {},
      productionTime: productionTime || { min: 1, max: 3 },
      customization: customization || {
        allowFileUpload: true,
        acceptedFileTypes: ["pdf", "ai", "psd", "png", "jpg"],
        hasDesignService: false,
      },
      isActive: true, // M·∫∑c ƒë·ªãnh l√† active
      stock: 999, // Stock m·∫∑c ƒë·ªãnh
    };

    console.log(
      "üì¶ Product data to save:",
      JSON.stringify(productData, null, 2)
    );

    // 5. T·∫°o s·∫£n ph·∫©m v·ªõi error handling t·ªët h∆°n
    let newProduct;
    try {
      newProduct = await Product.create(productData);
      console.log("‚úÖ Product created successfully with ID:", newProduct._id);
    } catch (createError) {
      console.error("‚ùå MongoDB create error:", createError);

      // X·ª≠ l√Ω duplicate key error
      if (createError.code === 11000) {
        return res.status(409).json({
          message: "S·∫£n ph·∫©m n√†y ƒë√£ t·ªìn t·∫°i",
        });
      }

      throw createError; // Re-throw ƒë·ªÉ catch block b√™n ngo√†i x·ª≠ l√Ω
    }

    // 6. Populate printer info tr∆∞·ªõc khi tr·∫£ v·ªÅ
    await newProduct.populate({
      path: "printerId",
      select: "displayName avatarUrl",
    });

    res.status(201).json({
      success: true,
      message: "T·∫°o s·∫£n ph·∫©m th√†nh c√¥ng!",
      product: newProduct,
    });
  } catch (error) {
    console.error("‚ùå Error creating product:", error);

    // Chi ti·∫øt error n·∫øu l√† validation error c·ªßa Mongoose
    if (error.name === "ValidationError") {
      const validationErrors = Object.values(error.errors).map(
        (err) => err.message
      );
      return res.status(400).json({
        success: false,
        message: "D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá",
        errors: validationErrors,
      });
    }

    // Cast error (invalid ObjectId)
    if (error.name === "CastError") {
      return res.status(400).json({
        success: false,
        message: "ID kh√¥ng h·ª£p l·ªá",
      });
    }

    res.status(500).json({
      success: false,
      message: "L·ªói h·ªá th·ªëng khi t·∫°o s·∫£n ph·∫©m.",
      error: process.env.NODE_ENV === "development" ? error.message : undefined,
    });
  }
};

// @desc    L·∫•y t·∫•t c·∫£ s·∫£n ph·∫©m c·ªßa nh√† in
// @route   GET /api/products/my-products
// @access  Private (Ch·ªâ Printer)
export const getMyProducts = async (req, res) => {
  try {
    if (req.user.role !== "printer") {
      return res
        .status(403)
        .json({ message: "C·∫•m truy c·∫≠p: Ch·ªâ nh√† in m·ªõi xem ƒë∆∞·ª£c." });
    }

    const products = await Product.find({ printerId: req.user._id }).sort({
      createdAt: -1,
    }); // S·∫Øp x·∫øp m·ªõi nh·∫•t tr∆∞·ªõc

    res.status(200).json({
      success: true,
      products,
      count: products.length,
    });
  } catch (error) {
    console.error("L·ªói khi l·∫•y s·∫£n ph·∫©m:", error);
    res.status(500).json({
      success: false,
      message: "L·ªói h·ªá th·ªëng.",
    });
  }
};

// @desc    C·∫≠p nh·∫≠t s·∫£n ph·∫©m
// @route   PUT /api/products/:id
// @access  Private (Ch·ªâ Printer - owner)
export const updateProduct = async (req, res) => {
  try {
    if (req.user.role !== "printer") {
      return res.status(403).json({ message: "C·∫•m truy c·∫≠p." });
    }

    const product = await Product.findById(req.params.id);

    if (!product) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m." });
    }

    // Ki·ªÉm tra ownership
    if (product.printerId.toString() !== req.user._id.toString()) {
      return res
        .status(403)
        .json({ message: "B·∫°n kh√¥ng c√≥ quy·ªÅn ch·ªânh s·ª≠a s·∫£n ph·∫©m n√†y." });
    }

    // Update c√°c fields ƒë∆∞·ª£c g·ª≠i l√™n
    const allowedUpdates = [
      "name",
      "category",
      "description",
      "images",
      "pricing",
      "specifications",
      "productionTime",
      "customization",
      "isActive",
      "stock",
    ];

    allowedUpdates.forEach((field) => {
      if (req.body[field] !== undefined) {
        product[field] = req.body[field];
      }
    });

    await product.save();

    res.status(200).json({
      success: true,
      message: "C·∫≠p nh·∫≠t s·∫£n ph·∫©m th√†nh c√¥ng!",
      product,
    });
  } catch (error) {
    console.error("L·ªói khi c·∫≠p nh·∫≠t s·∫£n ph·∫©m:", error);
    res.status(500).json({
      success: false,
      message: "L·ªói h·ªá th·ªëng.",
    });
  }
};

// @desc    X√≥a s·∫£n ph·∫©m (soft delete)
// @route   DELETE /api/products/:id
// @access  Private (Ch·ªâ Printer - owner)
export const deleteProduct = async (req, res) => {
  try {
    if (req.user.role !== "printer") {
      return res.status(403).json({ message: "C·∫•m truy c·∫≠p." });
    }

    const product = await Product.findById(req.params.id);

    if (!product) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m." });
    }

    // Ki·ªÉm tra ownership
    if (product.printerId.toString() !== req.user._id.toString()) {
      return res
        .status(403)
        .json({ message: "B·∫°n kh√¥ng c√≥ quy·ªÅn x√≥a s·∫£n ph·∫©m n√†y." });
    }

    // Soft delete
    product.isActive = false;
    await product.save();

    res.status(200).json({
      success: true,
      message: "X√≥a s·∫£n ph·∫©m th√†nh c√¥ng!",
    });
  } catch (error) {
    console.error("L·ªói khi x√≥a s·∫£n ph·∫©m:", error);
    res.status(500).json({
      success: false,
      message: "L·ªói h·ªá th·ªëng.",
    });
  }
};
