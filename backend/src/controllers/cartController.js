// backend/src/controllers/cartController.js - ƒê√É KH·∫ÆC PH·ª§C 100%
import { Cart } from "../models/Cart.js";
import { Product } from "../models/Product.js";
import mongoose from "mongoose";

// === HELPER FUNCTIONS ===

/**
 * T√¨m ho·∫∑c t·∫°o m·ªõi gi·ªè h√†ng cho user
 */
const findOrCreateCart = async (userId) => {
  let cart = await Cart.findOne({ userId });
  if (!cart) {
    cart = await Cart.create({
      userId,
      items: [],
      totalItems: 0,
      totalAmount: 0,
    });
  }
  return cart;
};

/**
 * Populate th√¥ng tin s·∫£n ph·∫©m cho gi·ªè h√†ng tr∆∞·ªõc khi g·ª≠i v·ªÅ client
 */
const populateCart = (cart) => {
  return cart.populate({
    path: "items.productId",
    select: "name images category specifications printerId",
    populate: {
      path: "printerId",
      select: "displayName avatarUrl",
    },
  });
};

// === CONTROLLERS (Kh·ªõp v·ªõi useCartStore) ===

// @desc    L·∫•y gi·ªè h√†ng c·ªßa user
// @route   GET /api/cart
// @access  Private
export const getCart = async (req, res) => {
  try {
    const userId = req.user._id;
    const cart = await findOrCreateCart(userId);
    const populatedCart = await populateCart(cart);

    res.status(200).json({
      success: true,
      cart: populatedCart,
    });
  } catch (error) {
    console.error("‚ùå L·ªói getCart:", error);
    res.status(500).json({
      success: false,
      message: "L·ªói h·ªá th·ªëng khi l·∫•y gi·ªè h√†ng.",
    });
  }
};

// @desc    Th√™m s·∫£n ph·∫©m v√†o gi·ªè
// @route   POST /api/cart/add
// @access  Private
export const addToCart = async (req, res) => {
  try {
    const userId = req.user._id;
    const { productId, quantity, selectedPriceIndex, customization } = req.body;

    console.log("üì¶ Adding to cart:", {
      productId,
      quantity,
      selectedPriceIndex,
    });

    // 1. Validation input
    if (!productId || !quantity || selectedPriceIndex === undefined) {
      return res.status(400).json({
        success: false,
        message: "Thi·∫øu th√¥ng tin s·∫£n ph·∫©m.",
      });
    }

    // 2. Ki·ªÉm tra Product v√† Price
    const product = await Product.findById(productId);
    if (!product || !product.isActive) {
      return res.status(404).json({
        success: false,
        message: "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m ho·∫∑c s·∫£n ph·∫©m ƒë√£ ng∆∞ng kinh doanh.",
      });
    }

    const priceTier = product.pricing[selectedPriceIndex];
    if (!priceTier) {
      return res.status(400).json({
        success: false,
        message: "M·ª©c gi√° kh√¥ng h·ª£p l·ªá.",
      });
    }

    if (quantity < priceTier.minQuantity) {
      return res.status(400).json({
        success: false,
        message: `S·ªë l∆∞·ª£ng t·ªëi thi·ªÉu l√† ${priceTier.minQuantity}.`,
      });
    }

    // 3. T√¨m ho·∫∑c t·∫°o gi·ªè h√†ng
    const cart = await findOrCreateCart(userId);

    // 4. Ki·ªÉm tra xem s·∫£n ph·∫©m ƒë√£ t·ªìn t·∫°i trong gi·ªè h√†ng ch∆∞a
    const existingItemIndex = cart.items.findIndex(
      (item) => item.productId.toString() === productId
    );

    const subtotal = quantity * priceTier.pricePerUnit;

    if (existingItemIndex !== -1) {
      // C·∫≠p nh·∫≠t item ƒë√£ c√≥
      cart.items[existingItemIndex].quantity = quantity;
      cart.items[existingItemIndex].selectedPrice = {
        minQuantity: priceTier.minQuantity,
        pricePerUnit: priceTier.pricePerUnit,
        maxQuantity: priceTier.maxQuantity,
      };
      cart.items[existingItemIndex].customization = customization || {};
      cart.items[existingItemIndex].subtotal = subtotal;

      console.log("‚úÖ Updated existing item in cart");
    } else {
      // Th√™m item m·ªõi
      cart.items.push({
        productId,
        quantity,
        selectedPrice: {
          minQuantity: priceTier.minQuantity,
          pricePerUnit: priceTier.pricePerUnit,
          maxQuantity: priceTier.maxQuantity,
        },
        customization: customization || {},
        subtotal,
      });

      console.log("‚úÖ Added new item to cart");
    }

    // 5. T√≠nh to√°n l·∫°i t·ªïng ti·ªÅn v√† l∆∞u
    cart.calculateTotals();
    await cart.save();

    // 6. Populate v√† tr·∫£ v·ªÅ
    const populatedCart = await populateCart(cart);

    res.status(200).json({
      success: true,
      message: "ƒê√£ th√™m v√†o gi·ªè h√†ng!",
      cart: populatedCart,
    });
  } catch (error) {
    console.error("‚ùå L·ªói addToCart:", error);
    res.status(500).json({
      success: false,
      message: "L·ªói h·ªá th·ªëng khi th√™m v√†o gi·ªè h√†ng.",
    });
  }
};

// @desc    C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng item
// @route   PUT /api/cart/update
// @access  Private
export const updateCartItem = async (req, res) => {
  try {
    const userId = req.user._id;
    const { cartItemId, quantity } = req.body;

    console.log("üîÑ Updating cart item:", { cartItemId, quantity });

    // Validation
    if (!cartItemId || !quantity) {
      return res.status(400).json({
        success: false,
        message: "Thi·∫øu th√¥ng tin c·∫≠p nh·∫≠t.",
      });
    }

    if (quantity < 1) {
      return res.status(400).json({
        success: false,
        message: "S·ªë l∆∞·ª£ng ph·∫£i l·ªõn h∆°n 0.",
      });
    }

    // T√¨m gi·ªè h√†ng
    const cart = await Cart.findOne({ userId });
    if (!cart) {
      return res.status(404).json({
        success: false,
        message: "Kh√¥ng t√¨m th·∫•y gi·ªè h√†ng.",
      });
    }

    // T√¨m item c·∫ßn update
    const itemIndex = cart.items.findIndex(
      (item) => item._id.toString() === cartItemId
    );

    if (itemIndex === -1) {
      return res.status(404).json({
        success: false,
        message: "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m trong gi·ªè.",
      });
    }

    // Validate quantity v·ªõi minQuantity
    const item = cart.items[itemIndex];
    if (quantity < item.selectedPrice.minQuantity) {
      return res.status(400).json({
        success: false,
        message: `S·ªë l∆∞·ª£ng t·ªëi thi·ªÉu l√† ${item.selectedPrice.minQuantity}.`,
      });
    }

    // C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng v√† t√≠nh l·∫°i subtotal
    cart.items[itemIndex].quantity = quantity;
    cart.items[itemIndex].subtotal = quantity * item.selectedPrice.pricePerUnit;

    // T√≠nh to√°n l·∫°i t·ªïng ti·ªÅn v√† l∆∞u
    cart.calculateTotals();
    await cart.save();

    console.log("‚úÖ Cart item updated successfully");

    // Populate v√† tr·∫£ v·ªÅ
    const populatedCart = await populateCart(cart);

    res.status(200).json({
      success: true,
      message: "ƒê√£ c·∫≠p nh·∫≠t gi·ªè h√†ng!",
      cart: populatedCart,
    });
  } catch (error) {
    console.error("‚ùå L·ªói updateCartItem:", error);
    res.status(500).json({
      success: false,
      message: "L·ªói h·ªá th·ªëng khi c·∫≠p nh·∫≠t gi·ªè h√†ng.",
    });
  }
};

// @desc    X√≥a 1 item kh·ªèi gi·ªè - ƒê√É FIX!
// @route   DELETE /api/cart/remove/:cartItemId
// @access  Private
export const removeFromCart = async (req, res) => {
  try {
    const userId = req.user._id;
    const { cartItemId } = req.params;

    console.log("üóëÔ∏è Removing from cart:", { userId, cartItemId });

    // Validation
    if (!cartItemId || !mongoose.Types.ObjectId.isValid(cartItemId)) {
      return res.status(400).json({
        success: false,
        message: "ID s·∫£n ph·∫©m kh√¥ng h·ª£p l·ªá.",
      });
    }

    // T√¨m gi·ªè h√†ng
    const cart = await Cart.findOne({ userId });
    if (!cart) {
      return res.status(404).json({
        success: false,
        message: "Kh√¥ng t√¨m th·∫•y gi·ªè h√†ng.",
      });
    }

    // Ki·ªÉm tra item c√≥ t·ªìn t·∫°i kh√¥ng
    const itemExists = cart.items.some(
      (item) => item._id.toString() === cartItemId
    );

    if (!itemExists) {
      return res.status(404).json({
        success: false,
        message: "S·∫£n ph·∫©m kh√¥ng c√≥ trong gi·ªè.",
      });
    }

    // X√ìA ITEM B·∫∞NG C√ÅCH FILTER ARRAY (Thay v√¨ d√πng .remove() - ƒë√£ deprecated)
    cart.items = cart.items.filter(
      (item) => item._id.toString() !== cartItemId
    );

    console.log(
      `‚úÖ Removed item ${cartItemId} from cart. Remaining items: ${cart.items.length}`
    );

    // T√≠nh to√°n l·∫°i t·ªïng ti·ªÅn v√† l∆∞u
    cart.calculateTotals();
    await cart.save();

    // Populate v√† tr·∫£ v·ªÅ
    const populatedCart = await populateCart(cart);

    res.status(200).json({
      success: true,
      message: "ƒê√£ x√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng!",
      cart: populatedCart,
    });
  } catch (error) {
    console.error("‚ùå L·ªói removeFromCart:", error);
    res.status(500).json({
      success: false,
      message: "L·ªói h·ªá th·ªëng khi x√≥a s·∫£n ph·∫©m.",
    });
  }
};

// @desc    X√≥a s·∫°ch gi·ªè h√†ng (sau khi checkout)
// @route   DELETE /api/cart/clear
// @access  Private
export const clearCart = async (req, res) => {
  try {
    const userId = req.user._id;

    console.log("üßπ Clearing cart for user:", userId);

    const cart = await Cart.findOne({ userId });

    if (!cart) {
      // N·∫øu kh√¥ng c√≥ gi·ªè, t·∫°o gi·ªè tr·ªëng m·ªõi
      const newCart = await Cart.create({
        userId,
        items: [],
        totalItems: 0,
        totalAmount: 0,
      });

      return res.status(200).json({
        success: true,
        message: "Gi·ªè h√†ng ƒë√£ ƒë∆∞·ª£c l√†m s·∫°ch!",
        cart: newCart,
      });
    }

    // X√≥a t·∫•t c·∫£ items
    cart.items = [];
    cart.calculateTotals(); // S·∫Ω reset v·ªÅ 0
    await cart.save();

    console.log("‚úÖ Cart cleared successfully");

    res.status(200).json({
      success: true,
      message: "Gi·ªè h√†ng ƒë√£ ƒë∆∞·ª£c l√†m s·∫°ch!",
      cart,
    });
  } catch (error) {
    console.error("‚ùå L·ªói clearCart:", error);
    res.status(500).json({
      success: false,
      message: "L·ªói h·ªá th·ªëng khi x√≥a gi·ªè h√†ng.",
    });
  }
};

// @desc    C·∫≠p nh·∫≠t nhi·ªÅu items c√πng l√∫c (Batch update)
// @route   PUT /api/cart/batch-update
// @access  Private
export const batchUpdateCart = async (req, res) => {
  try {
    const userId = req.user._id;
    const { updates } = req.body; // Array of { cartItemId, quantity }

    if (!Array.isArray(updates) || updates.length === 0) {
      return res.status(400).json({
        success: false,
        message: "D·ªØ li·ªáu c·∫≠p nh·∫≠t kh√¥ng h·ª£p l·ªá.",
      });
    }

    const cart = await Cart.findOne({ userId });
    if (!cart) {
      return res.status(404).json({
        success: false,
        message: "Kh√¥ng t√¨m th·∫•y gi·ªè h√†ng.",
      });
    }

    // C·∫≠p nh·∫≠t t·ª´ng item
    updates.forEach(({ cartItemId, quantity }) => {
      const itemIndex = cart.items.findIndex(
        (item) => item._id.toString() === cartItemId
      );

      if (itemIndex !== -1 && quantity >= 1) {
        cart.items[itemIndex].quantity = quantity;
        cart.items[itemIndex].subtotal =
          quantity * cart.items[itemIndex].selectedPrice.pricePerUnit;
      }
    });

    cart.calculateTotals();
    await cart.save();

    const populatedCart = await populateCart(cart);

    res.status(200).json({
      success: true,
      message: "ƒê√£ c·∫≠p nh·∫≠t gi·ªè h√†ng!",
      cart: populatedCart,
    });
  } catch (error) {
    console.error("‚ùå L·ªói batchUpdateCart:", error);
    res.status(500).json({
      success: false,
      message: "L·ªói h·ªá th·ªëng.",
    });
  }
};
