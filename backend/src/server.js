import express from "express";
import dotenv from "dotenv";
import cors from "cors";
import { connectDB } from "./libs/db.js";
import authRoute from "./routes/authRoute.js";
import userRoute from "./routes/userRoute.js";
import cookieParser from "cookie-parser";
import { isAuthenticated } from "./middleware/authMiddleware.js";
import passport from "passport";
import session from "express-session";
import "./config/passport-setup.js";
import authOAuthRoute from "./routes/authOAuthRoute.js";
import chatRoute from "./routes/chatRoute.js";
import printerRoute from "./routes/printerRoute.js";
import productRoute from "./routes/productRoute.js";
const REFRESH_TOKEN_TTL = 14 * 24 * 60 * 60 * 1000; // 14 ng√†y

dotenv.config();

const app = express();
const PORT = process.env.PORT || 5001;

// ... (code kh√°c c·ªßa app)

// 1. ƒê·ªãnh nghƒ©a WhiteList
const whiteList = [
  "https://www.printz.vn", // Domain production
  "http://localhost:5173", // Domain frontend dev (thay 5173 b·∫±ng port c·ªßa b·∫°n)
];

// 2. T·∫°o C·∫•u h√¨nh CORS
const corsOptions = {
  origin: function (origin, callback) {
    // Ki·ªÉm tra xem origin (ngu·ªìn) c·ªßa request c√≥ n·∫±m trong whitelist kh√¥ng
    // Ho·∫∑c cho ph√©p n·∫øu origin l√† 'undefined' (v√≠ d·ª•: request t·ª´ Postman, REST Client)
    if (whiteList.indexOf(origin) !== -1 || !origin) {
      callback(null, true);
    } else {
      callback(new Error("Not allowed by CORS")); // Ch·∫∑n n·∫øu kh√¥ng c√≥ trong whitelist
    }
  },
  credentials: true, // Cho ph√©p g·ª≠i cookie
  methods: ["GET", "POST", "PUT", "DELETE", "OPTIONS"],
  allowedHeaders: ["Content-Type", "Authorization"],
};

// 3. S·ª≠ d·ª•ng c√°c middleware
app.use(cors(corsOptions)); // <-- S·ª¨ D·ª§NG C·∫§U H√åNH ·ªû TR√äN
app.use(express.json());
app.use(cookieParser());

// ... (code c√°c routes c·ªßa b·∫°n)

// --- (M·ªöI) C·∫•u h√¨nh Express Session ---
// Passport d√πng session ƒë·ªÉ l∆∞u th√¥ng tin user gi·ªØa c√°c request
app.use(
  session({
    secret: process.env.SESSION_SECRET || "your_fallback_session_secret", // üëà Th√™m bi·∫øn SESSION_SECRET v√†o Render
    resave: false,
    saveUninitialized: false, // Ch·ªâ l∆∞u session khi c√≥ g√¨ ƒë√≥ thay ƒë·ªïi
    cookie: {
      secure: process.env.NODE_ENV === "production", // Ch·ªâ g·ª≠i cookie qua HTTPS khi ·ªü production
      httpOnly: true, // NgƒÉn JavaScript truy c·∫≠p cookie
      maxAge: REFRESH_TOKEN_TTL, // C√≥ th·ªÉ d√πng l·∫°i bi·∫øn th·ªùi gian h·∫øt h·∫°n refresh token
      sameSite: process.env.NODE_ENV === "production" ? "none" : "lax", // Quan tr·ªçng cho cross-site
    },
  })
);

// --- (M·ªöI) Kh·ªüi t·∫°o Passport ---
app.use(passport.initialize()); // B·∫≠t Passport
app.use(passport.session()); // Cho Passport d√πng session

// --- NG∆Ø·ªúI ƒê∆ØA TIN C·ª¶A B·∫æP TR∆Ø·ªûNG ---
app.use((req, res, next) => {
  console.log(
    `--- MaÃÅy chuÃâ: V·ª´a nh·∫≠n ƒë∆∞·ª£c 1 y√™u c·∫ßu ${req.method} ƒë·∫øn ${req.path}`
  );
  next();
});

// --- M√ìN ƒÇN TH·ª¨ NGHI·ªÜM CHO TR√åNH DUY·ªÜT ---
app.get("/", (req, res) => {
  console.log("--- MaÃÅy chuÃâ: ƒêang x∆∞Ãâ lyÃÅ y√™u c√¢ÃÄu GET /");
  res.status(200).json({ message: "Nh√† b·∫øp ƒëang ho·∫°t ƒë·ªông!" });
});

// --- ƒêi·ªÅu ph·ªëi ---
app.use("/api/auth", authRoute);
app.use("/api/users", isAuthenticated, userRoute); //app.use("t√™n-khu-v·ª±c-VIP", baoVe, boiBanCuaKhuVucDo);
app.use("/api/auth", authOAuthRoute);
app.use("/api/chat", chatRoute);
app.use("/api/printer", printerRoute);
app.use("/api/products", productRoute);
// --- Kh·ªüi ƒë·ªông ---
connectDB().then(() => {
  app.listen(PORT, () => {
    console.log(`Server b·∫Øt ƒë·∫ßu tr√™n c·ªïng ${PORT}`);
  });
});
