// src/modules/chat/chat.service.js (üî• REFACTORED - CLEANED)
import { ChatRepository } from "./chat.repository.js";
import { ValidationException } from "../../shared/exceptions/index.js";
import { Logger } from "../../shared/utils/index.js";

// Import c√°c service con ƒë√£ ƒë∆∞·ª£c t√°ch ra
import { ChatAiService } from "./chat.ai.service.js";
import { ChatToolService } from "./chat.tools.service.js";
import { ChatResponseUtil } from "./chat.response.util.js";

export class ChatService {
  constructor() {
    this.chatRepository = new ChatRepository();

    // Inject c√°c service con
    this.aiService = new ChatAiService();
    this.toolService = new ChatToolService();
    // ChatResponseUtil l√† static, kh√¥ng c·∫ßn 'new'
  }

  /**
   * H√†m "router" ch√≠nh (Kh√¥ng ƒë·ªïi)
   */
  async handleMessage(userId, body, isGuest = false) {
    const { message, fileUrl, fileName, fileType, latitude, longitude } = body;
    let responsePayload;

    // 1. T·∫£i l·ªãch s·ª≠ chat
    let history = [];
    if (!isGuest && userId) {
      try {
        const conversation = await this.chatRepository.getHistory(userId);
        if (conversation && conversation.messages) {
          history = conversation.messages;
        }
      } catch (historyError) {
        Logger.error(
          `[ChatSvc] L·ªói khi t·∫£i l·ªãch s·ª≠ cho user ${userId}`,
          historyError
        );
      }
    }

    try {
      if (fileUrl) {
        // --- LU·ªíNG 1: X·ª≠ l√Ω File Upload ---
        Logger.debug(`[ChatSvc] Handling file upload: ${fileName}`);
        responsePayload = await this.handleFileMessage(
          userId,
          { fileUrl, fileName, fileType },
          history
        );
      } else if (message) {
        // --- LU·ªíNG 2: X·ª≠ l√Ω tin nh·∫Øn vƒÉn b·∫£n (DO AI ƒêI·ªÄU PH·ªêI) ---
        Logger.debug(`[ChatSvc] Handling orchestrated message: ${message}`);
        const context = { userId, isGuest, latitude, longitude };
        responsePayload = await this.handleOrchestratedMessage(
          message,
          history,
          context
        );
      } else {
        throw new ValidationException("Tin nh·∫Øn kh√¥ng h·ª£p l·ªá.");
      }

      // 3. L∆∞u l·ªãch s·ª≠ chat
      if (!isGuest && userId) {
        await this.saveChatHistory(
          userId,
          message || `ƒê√£ t·∫£i l√™n: ${fileName}`,
          responsePayload
        );
      }

      return responsePayload;
    } catch (error) {
      Logger.error("[ChatSvc] Fatal error in handleMessage:", error);
      return ChatResponseUtil.createTextResponse(
        "Xin l·ªói, t√¥i ƒëang g·∫∑p s·ª± c·ªë. Vui l√≤ng th·ª≠ l·∫°i sau."
      );
    }
  }

  /**
   * Lu·ªìng 1: X·ª≠ l√Ω tin nh·∫Øn c√≥ file (ƒê√£ c·∫≠p nh·∫≠t)
   */
  async handleFileMessage(userId, fileInfo, history) {
    const prompt = `Ng∆∞·ªùi d√πng v·ª´a t·∫£i l√™n file t√™n l√† "${fileInfo.fileName}" (lo·∫°i: ${fileInfo.fileType}). 
       H√£y h·ªèi h·ªç mu·ªën l√†m g√¨ v·ªõi file n√†y (v√≠ d·ª•: in file n√†y l√™n √°o, hay in file PDF n√†y).
       File URL (ch·ªâ ƒë·ªÉ tham kh·∫£o, kh√¥ng hi·ªán cho user): ${fileInfo.fileUrl}`;

    // G·ªçi AI Service
    const aiResponseText = await this.aiService.getTextOnlyCompletion(
      prompt,
      history
    );

    const quickReplies = [
      {
        text: "In file n√†y l√™n √°o",
        payload: `in file ${fileInfo.fileName} l√™n √°o`,
      },
      { text: "In file PDF n√†y", payload: `in file PDF ${fileInfo.fileName}` },
      { text: "Kh√¥ng, c·∫£m ∆°n", payload: "cancel" },
    ];

    return {
      type: "text",
      content: { text: aiResponseText },
      quickReplies: quickReplies,
    };
  }

  /**
   * Lu·ªìng 2: B·ªô n√£o AI ƒëi·ªÅu ph·ªëi (ƒê√£ c·∫≠p nh·∫≠t)
   */
  async handleOrchestratedMessage(messageText, history, context) {
    // 1. Chu·∫©n b·ªã tin nh·∫Øn
    const messages = ChatResponseUtil.prepareHistoryForOpenAI(history);
    messages.push({ role: "user", content: messageText });

    // 2. L·∫•y ƒë·ªãnh nghƒ©a tools
    const toolDefinitions = this.toolService.getToolDefinitions();

    // 3. G·ªçi AI (L·∫ßn 1)
    const aiResponse = await this.aiService.getCompletion(
      messages,
      toolDefinitions
    );
    const responseMessage = aiResponse.choices[0].message;

    // 4. KI·ªÇM TRA N·∫æU AI MU·ªêN D√ôNG C√îNG C·ª§
    if (responseMessage.tool_calls) {
      messages.push(responseMessage); // Th√™m y√™u c·∫ßu c·ªßa AI v√†o ng·ªØ c·∫£nh

      // 5. Th·ª±c thi c√¥ng c·ª• (ch·ªâ x·ª≠ l√Ω 1 tool call ƒë·∫ßu ti√™n cho ƒë∆°n gi·∫£n)
      const toolCall = responseMessage.tool_calls[0];
      const { response, isTerminal } = await this.toolService.executeTool(
        toolCall,
        context
      );

      // N·∫øu tool l√† "terminal" (nh∆∞ find_products), tr·∫£ v·ªÅ ngay
      if (isTerminal) {
        return response;
      }

      // 6. N·∫øu tool l√† "RAG" (nh∆∞ find_printers), g·ªçi l·∫°i AI
      messages.push(response.response); // Th√™m k·∫øt qu·∫£ c·ªßa tool v√†o ng·ªØ c·∫£nh

      const finalAiResponse = await this.aiService.getCompletion(
        messages,
        toolDefinitions
      );
      return ChatResponseUtil.createTextResponse(
        finalAiResponse.choices[0].message.content,
        true // Th√™m quick replies m·∫∑c ƒë·ªãnh
      );
    } else {
      // 7. AI TR·∫¢ L·ªúI TH·∫≤NG
      return ChatResponseUtil.createTextResponse(
        responseMessage.content,
        true // Th√™m quick replies m·∫∑c ƒë·ªãnh
      );
    }
  }

  /**
   * Qu·∫£n l√Ω l·ªãch s·ª≠ (Kh√¥ng ƒë·ªïi)
   */
  async saveChatHistory(userId, userMessageText, aiResponsePayload) {
    try {
      const conversation = await this.chatRepository.findOrCreateConversation(
        userId
      );

      const userMessage = await this.chatRepository.createMessage({
        conversationId: conversation._id,
        sender: userId,
        senderType: "User",
        content: { text: userMessageText },
      });

      const aiText =
        aiResponsePayload.content.text || "T√¥i ƒë√£ g·ª≠i cho b·∫°n m·ªôt s·ªë l·ª±a ch·ªçn.";

      const aiMessage = await this.chatRepository.createMessage({
        conversationId: conversation._id,
        sender: null,
        senderType: "AI",
        content: { text: aiText },
      });

      conversation.messages.push(userMessage._id, aiMessage._id);
      conversation.lastMessageAt = Date.now();
      await this.chatRepository.saveConversation(conversation);

      Logger.success(`[ChatSvc] Chat history saved for user ${userId}`);
    } catch (saveError) {
      Logger.error(
        `[ChatSvc] Failed to save history for user ${userId}:`,
        saveError
      );
    }
  }

  /**
   * Qu·∫£n l√Ω l·ªãch s·ª≠ (Kh√¥ng ƒë·ªïi)
   */
  async getHistory(userId) {
    if (!userId) return [];
    const conversation = await this.chatRepository.getHistory(userId);
    return conversation ? conversation.messages : [];
  }
}
