// src/stores/useAuthStore.ts (S·ª¨A L·∫†I)

import { create } from "zustand";
import { persist, createJSONStorage } from "zustand/middleware";
import { toast } from "sonner";
import { authService } from "@/services/authService";
import type { AuthState } from "@/types/store";
import { User } from "@/types/user"; // üëà Th√™m import User

export const useAuthStore = create<AuthState>()(
  persist(
    (set, get) => ({
      accessToken: null,
      user: null,
      loading: false,

      // --- Setter c∆° b·∫£n ---
      setAccessToken: (accessToken) => set({ accessToken }),
      setUser: (user: User) => set({ user }), // üëà *** TH√äM H√ÄM setUser ***
      clearState: () => set({ accessToken: null, user: null, loading: false }),

      // --- ƒêƒÉng k√Ω (S·ª¨A L·∫†I THAM S·ªê) ---
      signUp: async (
        username,
        password,
        email,
        firstName, // üëà S·ª≠a ...args th√†nh tham s·ªë r√µ r√†ng
        lastName
      ) => {
        try {
          set({ loading: true });
          // üëá *** S·ª≠a l·∫°i c√°ch g·ªçi h√†m ***
          const res = await authService.signUp(
            username,
            password,
            email,
            firstName,
            lastName
          );
          if (import.meta.env.DEV) console.log("‚úÖ [Signup]", res);
          toast.success("ƒêƒÉng k√Ω th√†nh c√¥ng! H√£y ƒëƒÉng nh·∫≠p ƒë·ªÉ ti·∫øp t·ª•c.");
        } catch (err: any) {
          console.error("‚ùå [Signup Error]", err);
          const msg =
            err.response?.data?.message || "ƒêƒÉng k√Ω th·∫•t b·∫°i, th·ª≠ l·∫°i!";
          toast.error(msg);
        } finally {
          set({ loading: false });
        }
      },

      // --- ƒêƒÉng nh·∫≠p th∆∞·ªùng ---
      signIn: async (username, password) => {
        try {
          set({ loading: true });
          const res = await authService.signIn(username, password);
          if (import.meta.env.DEV) console.log("‚úÖ [Signin]", res);

          if (!res?.accessToken) throw new Error("Thi·∫øu access token!");
          get().setAccessToken(res.accessToken);
          await get().fetchMe(true);
          toast.success("Ch√†o m·ª´ng b·∫°n quay l·∫°i PrintZ üéâ");
        } catch (err: any) {
          console.error("‚ùå [Signin Error]", err);
          const status = err.response?.status;
          if (status === 401) toast.error("Sai t√™n ƒëƒÉng nh·∫≠p ho·∫∑c m·∫≠t kh·∫©u!");
          else if (status === 403)
            toast.error("T√†i kho·∫£n b·ªã kho√° ho·∫∑c h·∫øt phi√™n ƒëƒÉng nh·∫≠p!");
          else toast.error("Kh√¥ng th·ªÉ ƒëƒÉng nh·∫≠p!");
        } finally {
          set({ loading: false });
        }
      },

      // --- ƒêƒÉng nh·∫≠p Google ---
      signInWithGoogle: async () => {
        try {
          set({ loading: true });
          const popup = window.open(
            `${import.meta.env.VITE_SERVER_URL}/api/auth/google`,
            "googleLogin",
            "width=600,height=700"
          );

          if (!popup) throw new Error("Kh√¥ng th·ªÉ m·ªü c·ª≠a s·ªï ƒëƒÉng nh·∫≠p Google!");

          const token = await new Promise<string>((resolve, reject) => {
            const timer = setTimeout(() => {
              reject(new Error("H·∫øt th·ªùi gian ch·ªù ƒëƒÉng nh·∫≠p Google!"));
            }, 10000);

            window.addEventListener("message", (event) => {
              if (event.data?.accessToken) {
                clearTimeout(timer);
                resolve(event.data.accessToken);
                popup.close();
              }
            });
          });

          get().setAccessToken(token);
          await get().fetchMe(true);
          toast.success("ƒêƒÉng nh·∫≠p Google th√†nh c√¥ng üéâ");
        } catch (err: any) {
          console.error("‚ùå [Google Login Error]", err);
          toast.error(err.message || "Kh√¥ng th·ªÉ ƒëƒÉng nh·∫≠p b·∫±ng Google!");
        } finally {
          set({ loading: false });
        }
      },

      // --- ƒêƒÉng xu·∫•t ---
      signOut: async () => {
        try {
          const res = await authService.signOut();
          if (import.meta.env.DEV) console.log("‚úÖ [Signout]", res);
          set({ accessToken: null, user: null });
          localStorage.removeItem("auth-store");
          toast.success("ƒêƒÉng xu·∫•t th√†nh c√¥ng!");
        } catch (err) {
          console.error("‚ùå [Signout Error]", err);
          toast.error("L·ªói khi ƒëƒÉng xu·∫•t!");
        }
      },

      // --- L·∫•y th√¥ng tin ng∆∞·ªùi d√πng ---
      fetchMe: async (silent = false) => {
        try {
          const user = await authService.fetchMe();
          if (import.meta.env.DEV) console.log("‚úÖ [FetchMe]", user);
          set({ user });
        } catch (err: any) {
          console.error("‚ùå [FetchMe Error]", err);
          get().clearState();
          if (!silent)
            toast.error(
              "Kh√¥ng th·ªÉ t·∫£i th√¥ng tin ng∆∞·ªùi d√πng. H√£y ƒëƒÉng nh·∫≠p l·∫°i!"
            );
        }
      },

      // --- L√†m m·ªõi token ---
      refresh: async () => {
        try {
          const res = await authService.refresh();
          if (import.meta.env.DEV) console.log("‚úÖ [Refresh]", res);
          if (!res?.accessToken) throw new Error("Kh√¥ng c√≥ accessToken!");
          get().setAccessToken(res.accessToken);
          if (!get().user) await get().fetchMe(true);
        } catch (err) {
          console.error("‚ùå [Refresh Error]", err);
          get().clearState();
          toast.error("Phi√™n ƒëƒÉng nh·∫≠p ƒë√£ h·∫øt h·∫°n, vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i!");
        }
      },
    }),
    {
      name: "auth-store",
      storage: createJSONStorage(() => localStorage),
      partialize: (state) => ({
        user: state.user,
        accessToken: state.accessToken,
      }),
      onRehydrateStorage: () => (state) => {
        if (import.meta.env.DEV) {
          console.log("‚ôªÔ∏è [Rehydrate AuthStore]", state);
        }
      },
    }
  )
);
