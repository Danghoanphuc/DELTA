// src/stores/useAuthStore.ts (C·∫¨P NH·∫¨T)

import { create } from "zustand";
import { persist, createJSONStorage } from "zustand/middleware";
import { toast } from "sonner";
import { authService } from "@/services/authService";
import { printerService } from "@/services/printerService"; // <-- TH√äM IMPORT
import type { AuthState } from "@/types/store";
import { User } from "@/types/user";
import { PrinterProfile } from "@/types/printerProfile"; // <-- TH√äM IMPORT

export const useAuthStore = create<AuthState>()(
  persist(
    (set, get) => ({
      accessToken: null,
      user: null,
      printerProfile: null, // <-- TH√äM STATE
      loading: false,

      // --- Setter c∆° b·∫£n ---
      setAccessToken: (accessToken) => set({ accessToken }),
      setUser: (user: User) => set({ user }),
      setPrinterProfile: (profile: PrinterProfile | null) =>
        set({ printerProfile: profile }), // <-- TH√äM SETTER
      clearState: () =>
        set({
          accessToken: null,
          user: null,
          printerProfile: null, // <-- C·∫¨P NH·∫¨T
          loading: false,
        }),

      // --- (Gi·ªØ nguy√™n signUp, signIn, signInWithGoogle) ---
      signUp: async (
        email,
        password,
        displayName
        // (B·ªè firstName, lastName, username)
      ) => {
        try {
          set({ loading: true });
          const res = await authService.signUp(email, password, displayName);
          if (import.meta.env.DEV) console.log("‚úÖ [Signup]", res);
          // (Kh√¥ng toast ·ªü ƒë√¢y, AuthFlow s·∫Ω t·ª± chuy·ªÉn step)
        } catch (err: any) {
          console.error("‚ùå [Signup Error]", err);
          const msg =
            err.response?.data?.message || "ƒêƒÉng k√Ω th·∫•t b·∫°i, th·ª≠ l·∫°i!";
          toast.error(msg);
          throw err; // N√©m l·ªói ƒë·ªÉ AuthFlow b·∫Øt ƒë∆∞·ª£c
        } finally {
          set({ loading: false });
        }
      },
      // --- (S·ª¨A) ƒêƒÉng nh·∫≠p th∆∞·ªùng ---
      signIn: async (email, password) => {
        // <-- S·ª≠a 'username' th√†nh 'email'
        try {
          set({ loading: true });
          const res = await authService.signIn(email, password); // <-- G·ª≠i 'email'
          if (import.meta.env.DEV) console.log("‚úÖ [Signin]", res);

          if (!res?.accessToken) throw new Error("Thi·∫øu access token!");
          get().setAccessToken(res.accessToken);
          await get().fetchMe(true);
          toast.success("Ch√†o m·ª´ng b·∫°n quay l·∫°i PrintZ üéâ");
        } catch (err: any) {
          console.error("‚ùå [Signin Error]", err);
          const status = err.response?.status;

          // (B·ªé) Interceptor 401 t·ª± refresh
          // if (status === 401) toast.error("Sai email ho·∫∑c m·∫≠t kh·∫©u!");
          if (status === 403)
            toast.error("T√†i kho·∫£n ch∆∞a x√°c th·ª±c ho·∫∑c ƒë√£ b·ªã kho√°!");
          else toast.error("Sai email ho·∫∑c m·∫≠t kh·∫©u!");

          throw err; // N√©m l·ªói ƒë·ªÉ AuthFlow b·∫Øt ƒë∆∞·ª£c
        } finally {
          set({ loading: false });
        }
      },
      // src/stores/useAuthStore.ts

      // --- ƒêƒÉng nh·∫≠p Google ---
      signInWithGoogle: async () => {
        try {
          set({ loading: true });
          const popup = window.open(
            `${import.meta.env.VITE_SERVER_URL}/api/auth/google`,
            "googleLogin",
            "width=600,height=700"
          );

          if (!popup) throw new Error("Kh√¥ng th·ªÉ m·ªü c·ª≠a s·ªï ƒëƒÉng nh·∫≠p Google!");

          const token = await new Promise<string>((resolve, reject) => {
            const timer = setTimeout(() => {
              reject(new Error("H·∫øt th·ªùi gian ch·ªù ƒëƒÉng nh·∫≠p Google!"));
            }, 10000); // 10 gi√¢y ch·ªù

            window.addEventListener("message", (event) => {
              // (B·∫°n c√≥ th·ªÉ th√™m ki·ªÉm tra event.origin ·ªü ƒë√¢y)
              if (event.data?.accessToken) {
                clearTimeout(timer);
                resolve(event.data.accessToken);
                popup.close();
              }
            });
          });

          get().setAccessToken(token);
          await get().fetchMe(true);
          toast.success("ƒêƒÉng nh·∫≠p Google th√†nh c√¥ng üéâ");
        } catch (err: any) {
          console.error("‚ùå [Google Login Error]", err);
          toast.error(err.message || "Kh√¥ng th·ªÉ ƒëƒÉng nh·∫≠p b·∫±ng Google!");
        } finally {
          set({ loading: false });
        }
      },
      // --- ƒêƒÉng xu·∫•t (S·ª¨A L·∫†I) ---
      signOut: async () => {
        try {
          const res = await authService.signOut();
          if (import.meta.env.DEV) console.log("‚úÖ [Signout]", res);
          get().clearState(); // <-- S·ª¨A L·∫†I: D√πng clearState
          localStorage.removeItem("auth-store");
          toast.success("ƒêƒÉng xu·∫•t th√†nh c√¥ng!");
        } catch (err) {
          console.error("‚ùå [Signout Error]", err);
          get().clearState(); // V·∫´n clear state k·ªÉ c·∫£ khi l·ªói
          toast.error("L·ªói khi ƒëƒÉng xu·∫•t!");
        }
      },

      // --- L·∫•y th√¥ng tin ng∆∞·ªùi d√πng (S·ª¨A L·∫†I) ---
      fetchMe: async (silent = false) => {
        try {
          const user = await authService.fetchMe();
          if (import.meta.env.DEV) console.log("‚úÖ [FetchMe]", user);
          set({ user });

          // --- (LOGIC M·ªöI) ---
          // N·∫øu l√† nh√† in, l·∫•y th√™m th√¥ng tin h·ªì s∆°
          if (user.role === "printer" && user.printerProfile) {
            try {
              const profile = await printerService.getMyProfile();
              if (import.meta.env.DEV)
                console.log("‚úÖ [FetchProfile]", profile);
              set({ printerProfile: profile });
            } catch (profileError) {
              console.error("‚ùå [FetchProfile Error]", profileError);
              // L·ªói n√†y kh√¥ng nghi√™m tr·ªçng b·∫±ng l·ªói fetchMe,
              // kh√¥ng c·∫ßn clearState, ch·ªâ c·∫ßn b√°o l·ªói
              toast.error("Kh√¥ng th·ªÉ t·∫£i h·ªì s∆° x∆∞·ªüng in.");
              set({ printerProfile: null }); // Set v·ªÅ null
            }
          }
          // --- (H·∫æT LOGIC M·ªöI) ---
        } catch (err: any) {
          console.error("‚ùå [FetchMe Error]", err);
          get().clearState(); // L·ªói fetchMe l√† nghi√™m tr·ªçng, ƒëƒÉng xu·∫•t user
          if (!silent)
            toast.error(
              "Kh√¥ng th·ªÉ t·∫£i th√¥ng tin ng∆∞·ªùi d√πng. H√£y ƒëƒÉng nh·∫≠p l·∫°i!"
            );
        }
      },

      // --- L√†m m·ªõi token (S·ª¨A L·∫†I) ---
      refresh: async () => {
        try {
          const res = await authService.refresh();
          if (import.meta.env.DEV) console.log("‚úÖ [Refresh]", res);
          if (!res?.accessToken) throw new Error("Kh√¥ng c√≥ accessToken!");
          get().setAccessToken(res.accessToken);

          // (S·ª≠a l·∫°i) Ch·ªâ fetchMe n·∫øu ch∆∞a c√≥ user
          if (!get().user) {
            await get().fetchMe(true); // fetchMe ƒë√£ bao g·ªìm c·∫£ fetchProfile
          }
        } catch (err) {
          console.error("‚ùå [Refresh Error]", err);
          get().clearState();
          // (Kh√¥ng toast ·ªü ƒë√¢y, v√¨ axios interceptor s·∫Ω x·ª≠ l√Ω)
        }
      },
    }),
    {
      name: "auth-store",
      storage: createJSONStorage(() => localStorage),
      // (C·∫≠p nh·∫≠t partialize ƒë·ªÉ bao g·ªìm c·∫£ printerProfile)
      partialize: (state) => ({
        user: state.user,
        accessToken: state.accessToken,
        printerProfile: state.printerProfile, // <-- TH√äM
      }),
      onRehydrateStorage: () => (state) => {
        if (import.meta.env.DEV) {
          console.log("‚ôªÔ∏è [Rehydrate AuthStore]", state);
        }
      },
    }
  )
);
