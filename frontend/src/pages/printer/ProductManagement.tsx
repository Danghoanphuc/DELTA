// src/pages/printer/ProductManagement.tsx (ƒê√É S·ª¨A)
// S·ª≠a l·ªói TS6133, TS6192: B·∫±ng c√°ch th√™m JSX ƒë·ªÉ s·ª≠ d·ª•ng c√°c import
import { useState } from "react";
import { Plus, Search, Edit, Trash2, Box } from "lucide-react";
import { Card, CardContent } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
// Th√™m import Table (Gi·∫£ s·ª≠ b·∫°n ƒë√£ c√≥ component n√†y t·ª´ shadcn/ui)
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";

export function ProductManagement() {
  // S·ª¨A L·ªñI: S·ª≠ d·ª•ng c√°c state ƒë√£ khai b√°o
  const [selectedTab, setSelectedTab] = useState("all");
  const [searchTerm, setSearchTerm] = useState("");

  // D·ªØ li·ªáu m·∫´u
  const products = [
    {
      id: "P001",
      name: "H·ªôp carton 3 l·ªõp",
      category: "Bao b√¨",
      price: "5,000 ‚Ç´",
      stock: 1500,
    },
    {
      id: "P002",
      name: "Sticker decal nh·ª±a",
      category: "Sticker",
      price: "1,500 ‚Ç´",
      stock: 10000,
    },
    {
      id: "P003",
      name: "√Åo thun ƒë·ªìng ph·ª•c",
      category: "Th·ªùi trang",
      price: "120,000 ‚Ç´",
      stock: 500,
    },
  ];

  return (
    <div className="flex-1 overflow-auto bg-gray-50">
      <div className="p-8 max-w-7xl mx-auto">
        {/* Header */}
        <div className="flex items-center justify-between mb-8">
          <div>
            <h1 className="text-2xl font-bold text-gray-900 mb-2">
              Qu·∫£n l√Ω s·∫£n ph·∫©m
            </h1>
            <p className="text-gray-600">
              C·∫≠p nh·∫≠t v√† qu·∫£n l√Ω c√°c s·∫£n ph·∫©m in ·∫•n c·ªßa b·∫°n
            </p>
          </div>
          <Button className="bg-gradient-to-r from-orange-400 to-red-500 hover:from-orange-500 hover:to-red-600">
            <Plus size={20} className="mr-2" />
            Th√™m s·∫£n ph·∫©m m·ªõi
          </Button>
        </div>

        {/* --- Th√™m JSX ƒë·ªÉ s·ª≠ d·ª•ng component --- */}
        <Card className="border-none shadow-sm bg-white">
          <CardContent className="p-6">
            <Tabs
              defaultValue="all"
              value={selectedTab}
              onValueChange={setSelectedTab} // üëà S·ª≠ d·ª•ng state
            >
              <div className="flex items-center justify-between mb-4">
                {/* S·ª≠ d·ª•ng TabsList, TabsTrigger */}
                <TabsList>
                  <TabsTrigger value="all">T·∫•t c·∫£ s·∫£n ph·∫©m</TabsTrigger>
                  <TabsTrigger value="packaging">Bao b√¨</TabsTrigger>
                  <TabsTrigger value="fashion">Th·ªùi trang</TabsTrigger>
                  <TabsTrigger value="sticker">Sticker</TabsTrigger>
                </TabsList>
                {/* S·ª≠ d·ª•ng Input v√† Search icon */}
                <div className="relative w-full max-w-sm">
                  <Search
                    size={18}
                    className="absolute left-3 top-1/2 -translate-y-1/2 text-gray-400"
                  />
                  <Input
                    placeholder="T√¨m ki·∫øm s·∫£n ph·∫©m..."
                    className="pl-10"
                    value={searchTerm}
                    onChange={(e) => setSearchTerm(e.target.value)} // üëà S·ª≠ d·ª•ng state
                  />
                </div>
              </div>

              {/* S·ª≠ d·ª•ng TabsContent */}
              <TabsContent value="all">
                <ProductTable
                  products={products}
                  EditIcon={Edit}
                  TrashIcon={Trash2}
                  BoxIcon={Box}
                />
              </TabsContent>
              <TabsContent value="packaging">
                <ProductTable
                  products={products.filter((p) => p.category === "Bao b√¨")}
                  EditIcon={Edit}
                  TrashIcon={Trash2}
                  BoxIcon={Box}
                />
              </TabsContent>
              {/* (Th√™m c√°c TabsContent kh√°c n·∫øu c·∫ßn) */}
            </Tabs>
          </CardContent>
        </Card>
      </div>
    </div>
  );
}

// Component ph·ª• ƒë·ªÉ render b·∫£ng (gi√∫p s·ª≠ d·ª•ng c√°c icon)
function ProductTable({
  products,
  EditIcon,
  TrashIcon,
  BoxIcon,
}: {
  products: any[];
  EditIcon: any;
  TrashIcon: any;
  BoxIcon: any;
}) {
  if (products.length === 0) {
    return (
      <div className="flex flex-col items-center justify-center text-center p-12 border-2 border-dashed border-gray-200 rounded-lg">
        <BoxIcon size={48} className="text-gray-300 mb-4" /> {/* S·ª≠ d·ª•ng Box */}
        <h3 className="font-semibold text-gray-700">Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m</h3>
        <p className="text-gray-500 text-sm">
          Ch∆∞a c√≥ s·∫£n ph·∫©m n√†o trong danh m·ª•c n√†y.
        </p>
      </div>
    );
  }

  return (
    <Table>
      <TableHeader>
        <TableRow>
          <TableHead>M√£ SP</TableHead>
          <TableHead>T√™n s·∫£n ph·∫©m</TableHead>
          <TableHead>Danh m·ª•c</TableHead>
          <TableHead>Gi√° (tham kh·∫£o)</TableHead>
          <TableHead>T·ªìn kho</TableHead>
          <TableHead className="text-right">H√†nh ƒë·ªông</TableHead>
        </TableRow>
      </TableHeader>
      <TableBody>
        {products.map((product) => (
          <TableRow key={product.id}>
            <TableCell className="font-medium">{product.id}</TableCell>
            <TableCell>{product.name}</TableCell>
            <TableCell>{product.category}</TableCell>
            <TableCell>{product.price}</TableCell>
            <TableCell>{product.stock}</TableCell>
            <TableCell className="text-right space-x-2">
              <Button variant="ghost" size="icon" title="S·ª≠a">
                <EditIcon size={18} /> {/* S·ª≠ d·ª•ng EditIcon */}
              </Button>
              <Button variant="ghost" size="icon" title="X√≥a">
                <TrashIcon size={18} className="text-red-600" />{" "}
                {/* S·ª≠ d·ª•ng TrashIcon */}
              </Button>
            </TableCell>
          </TableRow>
        ))}
      </TableBody>
    </Table>
  );
}
